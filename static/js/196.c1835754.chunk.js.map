{"version":3,"file":"static/js/196.c1835754.chunk.js","mappings":"8QAyEA,EA7DoB,WAChB,OAKIA,EAAAA,EAAAA,IAAe,CACfC,UAAUC,EAAAA,EAAAA,GAAYC,EAAAA,GACtBC,cAAe,KANfC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,MACaC,EAJjB,EAIIC,UAAaD,OAMjB,GAAsCE,EAAAA,EAAAA,KAA/BC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cACfC,GAAUC,EAAAA,EAAAA,MAUhB,OACI,iBAAKC,UAAU,YAAf,WACI,sCACI,SAAC,KAAD,CACIT,aAAcA,EACdU,SAbC,SAACC,GACd,IAAMC,EAAgBC,IAAOF,EAAKG,WAAY,kBAAkBC,SAASC,MAAM,EAAG,IAC5EC,GAAO,kBAAON,GAAP,IAAaG,WAAYF,IACtCP,EAAaY,GACbX,IACAC,EAAQW,KAAK,MASDnB,SAAUA,EACVG,OAAQA,EAJZ,UAMI,iBAAKO,UAAU,OAAf,WACI,SAAC,KAAD,CACIU,OAAO,OACPC,MAAM,UACNC,gBAAgB,UAChBC,MAAM,QACNC,OAAO,OACPC,KAAK,SACLC,OAAO,MACPC,SAAS,WACTC,QAAQ,eAEZ,SAAC,KAAD,CACIR,OAAO,OACPC,MAAM,UACNC,gBAAgB,UAChBC,MAAM,QACNC,OAAO,OACPC,KAAK,SACLC,OAAO,MACPC,SAAS,QACTC,QAAQ,YACRC,QAAS,kBAAM3B,iB,mEC/D9BJ,EAAmBgC,EAAAA,KAAaC,MAAM,CAC/CC,WAAYF,EAAAA,KACPG,SAAS,0BACTC,IAAI,IAAK,6CACdC,UAAWL,EAAAA,KACNG,SAAS,yBACTC,IAAI,IAAK,4CACdnB,WAAYe,EAAAA,KACPG,SAAS,0BACdG,OAAQN,EAAAA,KACHG,SAAS,sBACdI,UAAWP,EAAAA,KACNG,SAAS,yBACTC,IAAI,KAAM,6CACfI,IAAKR,EAAAA,KACAG,SAAS,mBACTC,IAAI,IAAK","sources":["pages/userAddPage/UserAddPage.tsx","validations/formValidation.ts"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport moment from 'moment';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {useHistory} from \"react-router-dom\";\n\nimport {Button, UserForm} from \"../../components\";\nimport {validationSchema} from \"../../validations/formValidation\";\nimport {IUser} from \"../../models/IUser\";\nimport {useActions} from \"../../hooks/useActions\";\n\n\nconst UserAddPage = () => {\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { errors }\n    } = useForm<IUser>({\n        resolver: yupResolver(validationSchema),\n        defaultValues: {},\n    });\n\n    const {fetchAddUser, fetchAllUsers} = useActions();\n    const history = useHistory();\n\n    const onSubmit = (data: IUser) => {\n        const formattedDate = moment(data.birth_date, 'YYYY[-MM[-DD]]').format().slice(0, 10)\n        const newData = {...data, birth_date: formattedDate};\n        fetchAddUser(newData);\n        fetchAllUsers();\n        history.push('/')\n    };\n\n    return (\n        <div className='container'>\n            <h1>Add User</h1>\n                <UserForm\n                    handleSubmit={handleSubmit}\n                    onSubmit={onSubmit}\n                    register={register}\n                    errors={errors}\n                >\n                    <div className=\"mt-5\">\n                        <Button\n                            border=\"none\"\n                            color=\"#ffffff\"\n                            backgroundColor=\"#2d8dd6\"\n                            width=\"150px\"\n                            height=\"auto\"\n                            type='submit'\n                            radius=\"5px\"\n                            children=\"Add user\"\n                            padding='10px 20px'\n                        />\n                        <Button\n                            border=\"none\"\n                            color=\"#ffffff\"\n                            backgroundColor=\"#ebc334\"\n                            width=\"150px\"\n                            height=\"auto\"\n                            type='button'\n                            radius=\"5px\"\n                            children=\"Reset\"\n                            padding='10px 20px'\n                            onClick={() => reset()}\n                        />\n                    </div>\n                </UserForm>\n        </div>\n    );\n};\n\nexport default UserAddPage;\n","import * as Yup from \"yup\";\n\nexport const validationSchema = Yup.object().shape({\n    first_name: Yup.string()\n        .required('First Name is required')\n        .max(256, 'First Name must not exceed 256 characters'),\n    last_name: Yup.string()\n        .required('Last Name is required')\n        .max(256, 'Last Name must not exceed 256 characters'),\n    birth_date: Yup.date()\n        .required('Birth Date is required'),\n    gender: Yup.string()\n        .required('Gender is required'),\n    biography: Yup.string()\n        .required('Biography is required')\n        .max(1024, 'Biography must not exceed 1024 characters'),\n    job: Yup.string()\n        .required('Job is required')\n        .max(256, 'Job must not exceed 256 characters'),\n});\n"],"names":["useForm","resolver","yupResolver","validationSchema","defaultValues","register","handleSubmit","reset","errors","formState","useActions","fetchAddUser","fetchAllUsers","history","useHistory","className","onSubmit","data","formattedDate","moment","birth_date","format","slice","newData","push","border","color","backgroundColor","width","height","type","radius","children","padding","onClick","Yup","shape","first_name","required","max","last_name","gender","biography","job"],"sourceRoot":""}